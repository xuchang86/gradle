//apply plugin : 'java' 
//apply plugin : 'application' 

buildscript {
    repositories {
        //flatDir dirs:  "${gradle.gradleHomeDir}/customPlugins"
		//maven{
			//url "http://10.10.50.24:8081/nexus/content/groups/public/"
		//}
		flatDir dirs: '../encrypt/tool'
		jcenter()
    }
	
	dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.3'
        classpath ':proguard'
    }
}

apply plugin: 'tomcat'

 def compatibilityVersion = 1.7
 sourceCompatibility = compatibilityVersion
 targetCompatibility = compatibilityVersion

dependencies{
    //CAP运行时
    compile project(':cap-runtime:cap-runtime4top')
    compile project(':cap-runtime:cap-thermal-loading4top')
    //CAP建模
    //compile project(':cap-bm')
	compile project(':cap-bm:cap-bm-base')
	
    //compile project(':cap-bm:cap-bm-dev')
	compile project(':cap-bm:cap-bm-dev:cap-bm-dev-delegate')
	compile project(':cap-bm:cap-bm-dev:cap-bm-dev-exterior')
	
    //compile project(':cap-bm:cap-bm-bridger')
	compile project(':cap-bm:cap-bm-bridger:cap-bm-bridger4top')
	
    //compile project(':cap-bm:cap-bm-doc')
	compile project(':cap-bm:cap-bm-doc:cap-bm-doc-delegate')
	compile project(':cap-bm:cap-bm-doc:cap-bm-doc-exterior')
	  
    //compile project(':cap-bm:cap-bm-graph')
	compile project(':cap-bm:cap-bm-graph:cap-bm-graph-impl')
	compile project(':cap-bm:cap-bm-graph:cap-bm-graph-tools')
	
    compile project(':cap-bm:cap-bm-ptc')
	compile project(':cap-bm:cap-bm-ptc:cap-bm-ptc-delegate')
	compile project(':cap-bm:cap-bm-ptc:cap-bm-ptc-exterior')
	
    //compile project(':cap-bm:cap-bm-req')
	compile project(':cap-bm:cap-bm-req:cap-bm-req-delegate')
	compile project(':cap-bm:cap-bm-req:cap-bm-req-exterior')
	
    //compile project(':cap-bm:cap-bm-biz')
	compile project(':cap-bm:cap-bm-biz:cap-bm-biz-delegate')
	compile project(':cap-bm:cap-bm-biz:cap-bm-biz-exterior')
	
    //compile project(':cap-bm:cap-bm-test')
	compile project(':cap-bm:cap-bm-test:cap-bm-test-delegate')
	compile project(':cap-bm:cap-bm-test:cap-bm-test-exterior')
	
	//compile project(':cap-bm:cap-bm-dsg')
	compile project(':cap-bm:cap-bm-dsg:cap-bm-dsg-delegate')
	compile project(':cap-bm:cap-bm-dsg:cap-bm-dsg-exterior')
    
    //TOPjar包
    compile 'com.comtop.cap.runtime.top:comtop-top-extend-attr:' + topExtendAttrVersion
    compile 'com.comtop.cap.runtime.top:comtop-top-external-service:' + topExternalServiceVersion
    compile 'com.comtop.cap.runtime.top:comtop-top-post:' + topTopPostVersion
    compile 'com.comtop.cap.runtime.top:comtop-top-small-app:' + topSmallAppVersion
    compile 'com.comtop.cap.runtime.top:comtop-top-user-track:' + topUserTrackVersion
    compile 'com.comtop.cap.runtime.top:comtop-top-message:' + topMessageVersion
      
      //TOP基础平台
    compile 'javax.servlet:jstl:1.1.2'
    compile 'taglibs:standard:1.1.2'
    compile 'com.oracle.coherence:coherence:1.0'
    compile 'redis.clients:jedis:2.1.0'
    
    compile 'com.google.code:xmemcached:1.3.2'
    compile 'commons-configuration:commons-configuration:1.6'
    
      //EIC依赖jar包
    compile 'com.comtop.eic:eic-commons-jexl:2.0.1'
  	compile 'com.comtop.eic:eic-commons-digester:2.0'
  	compile 'com.comtop.eic:eic-commons-collections:3.2.1'
  	compile 'com.comtop.eic:eic-commons-codec:1.5'
    
  	//compile 'javax.activation:activation:1.1'
  	compile 'org.beanshell:bsh:2.0b4'
  	compile 'top-eim:eim-esponpen-client:3.6.2.RELEASE' //top与eim集成时需要使用
  	
    compile 'org.springframework:spring-oxm:3.2.0.RELEASE'
    compile 'org.springframework:spring-jms:3.2.0.RELEASE'
    compile 'org.springframework:spring-context-support:3.2.0.RELEASE'
  	compile 'commons-httpclient:commons-httpclient:3.1'
  	
  	compile 'org.codehaus.woodstox:woodstox-core-asl:4.2.0'
  	
  	compile 'wsdl4j:wsdl4j:1.6.3'
  	compile 'wss4j:wss4j:1.6.11'	
  	compile 'xml-resolver:xml-resolver:1.2'
  	compile 'org.apache.ws.xmlschema:xmlschema-core:2.0.3'
  	
  	compile 'com.adobe.blazeds:flex-messaging-common:20150427'
  	compile 'com.adobe.blazeds:flex-messaging-core:20150427'
  	compile 'com.adobe.blazeds:flex-messaging-opt:20150427'
  	compile 'com.adobe.blazeds:flex-messaging-proxy:20150427'
  	compile 'com.adobe.blazeds:flex-messaging-remoting:20150427'
  	compile 'com.adobe.blazeds:flex-rds-server:20150427'
  	
  	//原运行时使用的版本
  	compile 'org.codehaus.groovy:groovy-all:1.7.5'
  	
	//新运行时使用的版本
	compile 'org.apache.httpcomponents:httpcore:4.4.6'
  	compile 'org.codehaus.jackson:jackson-all:1.6.2'
  	//原运行时使用的版本
  	compile 'org.jboss.logging:jboss-logging:3.1.0.GA'
  	
  	compile 'joda-time:joda-time:2.2'
  	compile 'org.apache.neethi:neethi:3.0.2'
  	compile 'de.odysseus.juel:juel-impl:2.2.4'
  	compile 'opensymphony:quartz-all:1.8.6'
  	
  	compile 'org.jasig.cas:cas-client:1.0.0'
  	compile 'commons-pool:commons-pool:1.6'

  	compile 'net.sf.ehcache:ehcache:1.6.2'
  	compile 'com.comtop.eic:eic-commons-beanutils:1.8.3'
    compile 'com.comtop.eic:eic-poi-ooxml-schemas:3.9'
    compile 'com.comtop.eic:eic-poi-ooxml:3.9'
    compile 'com.comtop.eic:eic-poi:3.9'
    compile 'com.comtop.eic:eic-jxls-core:1.0.3'   
      
    compile '4A:isc_encrypt:1.0.0'
    compile '4A:isc_sso_agent:1.0.0'
    compile 'com.jacob:jacob:1.17.0'
    compile 'org.bouncycastle:bcprov-jdk14:143'
     	
    //原来运行时使用的版本
    compile 'com.jcraft:jsch:0.1.49'
    //新运行时使用的版本
    compile 'org.openoffice:juh:3.2.1'
    compile 'org.openoffice:jurt:3.2.1'
    compile 'log4j:log4j:1.2.15'
    compile "javax.mail:mail:1.4.5"
    compile '4A:org.json:1.0.0'
    compile 'org.openoffice:ridl:3.2.1'
    compile 'stax:stax-api:1.0.1'
  	compile 'org.codehaus.woodstox:stax2-api:3.1.1'
    compile 'org.openoffice:unoil:3.2.1'
  	compile 'org.apache.poi:poi:3.8-20120326'
  	compile 'org.apache.velocity:velocity:1.6.4:dep'
  	compile 'org.apache.ant:ant:1.6.5'

    //避免将此包打包到War
    //providedCompile 'javax.servlet:servlet-api:3.0'
    //providedCompile 'javax.servlet:jsp-api:2.2'
    //providedCompile 'de.odysseus.juel:juel-api:2.2.4'
    //providedCompile 'org.apache.tomcat.embed:tomcat-embed-core:7.0.42'
    
    compile 'org.slf4j:log4j-over-slf4j:1.7.5'
    compile 'org.apache.cxf:cxf:2.7.6'
    compile 'antlr:antlr:2.7.7'
    compile 'com.rabbitmq:amqp-client:3.6.2'
    
    compile 'org.javassist:javassist:3.17.1-GA'
    compile 'com.sun.xml.bind:jaxb-xjc:2.1.7'
    compile 'com.sun.xml.bind:jaxb-api:2.1'
    compile 'com.sun.xml.bind:jaxb-impl:2.1.7'
    
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.1.4'
    compile 'com.fasterxml.jackson.core:jackson-core:2.1.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.1.4'
    
    compile 'xerces:xercesimpl:2.11.0'
  	compile 'xml-apis:xml-apis:1.4.01'
}

ext{
	linkConfig = true
}

eclipse {
  wtp {
    component {
        classesDeployPath=sourceSets.main.output.classesDir
    }
  }
  
  project {
		file {
		
			//closure executed after .classpath content is loaded from existing file
		  	//and after gradle build information is merged
		  	whenMerged { eProject ->
		  		//根据要配置的资源链接的信息[链接名,链接类型,链接的目录,链接的url]，构建Link对象并加入eclipse.project(领域配置对象)中去
		  		//对应 eclipse中工程属性中的 resource->link resources里面的配置
		  		if(eclipse.hasProperty("requireLinks")) {
					eclipse.ext.requireLinks.each{
						eProject.linkedResources << new org.gradle.plugins.ide.eclipse.model.Link(it.name, it.type, it.location, it.locationUri)
					}		  		
		  		}
		  	}
		}
	}
	
  	classpath {
  		//若配置linkConfig为true则生成eclipse相关link的配置
  		if(project.hasProperty("linkConfig") && project.ext.linkConfig) {
  			//set eclipse source default output dir
    		defaultOutputDir = file("$webAppDirName/WEB-INF/classes")
    		
    		file {
  				//if you want to mess with the resulting XML in whatever way you fancy
  				//定制化生成的.classpath文件内容
	  			withXml {
	  				def node = it.asNode()
	  				//找到<classpathentry kind="src" path="src/main/resources"/>
	  				def srcCP = node.find{it.@kind=='src' && it.@path=='src/main/resources'}
					//println srcCP
		    		/*
		    		* 用于存放需要配置的资源链接，对应 eclipse中工程属性中的 resource->link resources里面的配置
		    		* 注意点：
		    		*	1、requireLinks需要在classpath这里创建和加入信息，在上面project里面在去访问，这是由于eclipse插件执行顺序导致的，eclipse执行顺序如下
		    		*	:cap-web:eclipseClasspath
					*	:cap-web:eclipseJdt
					*	:cap-web:eclipseProject
		    		*	2、这里不能使用project.ext.requireLinks，若使用的话在上面project会获取不到，原因暂时不知道，可能是由于闭包导致的。
		    		*/
		    		eclipse.ext.requireLinks = []
		    		//过滤掉当前项目
		    		rootProject.subprojects.findAll{it != project && it.addToEclipseClassPath}.each{
		    			//增加<classpathentry kind="src" path="cap-fileload"/>这样节点配置，对应 eclipse中工程属性中的 java build path里面的source的配置
		    			def projectName = it.name
		    			//增加同级节点
						if(!node.find{it.@kind=='src' && it.@path=="$projectName-java"}) {
							//println "classpathentry:$projectName"
							srcCP.plus{
								classpathentry(kind: 'src', path: "$projectName-java")
								classpathentry(kind: 'src', path: "$projectName-resource")
							}
						}
		    			
		    			//增加子节点
						//node.appendNode('classpathentry', [kind: 'src', path: it.name+'-java'])
						//node.appendNode('classpathentry', [kind: 'src', path: it.name+'-resource'])
						
						it.sourceSets.main.java.srcDirs.each { srcDir ->
							//加入要配置的资源链接的信息[链接名,链接类型,链接的目录,链接的url]，对应 eclipse中工程属性中的 resource->link resources里面的配置
							eclipse.ext.requireLinks << [name:"$it.name-java", type:'2', location:srcDir.path, locationUri: null]
						}
						it.sourceSets.main.resources.srcDirs.each { srcDir ->
							eclipse.ext.requireLinks << [name:"$it.name-resource", type:'2', location:srcDir.path, locationUri: null]
						}
					}
					
					//找到<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6/"/>
					def javaCP = node.find{it.@kind=='con' && it.@path.indexOf('org.eclipse.jdt.launching.JRE_CONTAINER') > -1}
					if(javaCP) {
						javaCP.appendNode('accessrules').appendNode('accessrule',[kind: 'accessible',pattern:'com/sun/xml/**'])
					}
	  			}
	  		}
  		}
	}
}

/**
 * eclipse中webapp项目buildpath增加其他工程的java文件和resource路径
 */
task addProjectEClassPath << {
	def parser = new XmlParser()
	def classpathList = parser.parse(file(".classpath"))
	//找到<classpathentry kind="src" path="src/main/resources"/>
	def srcCP = classpathList.find{it.@kind=='src' && it.@path=='src/main/resources'}
	rootProject.subprojects.findAll{it != project && it.addToEclipseClassPath}.each{
		def projectName = it.name
		//增加同级节点
		if(!classpathList.find{it.@kind=='src' && it.@path=="$projectName-java"}) {
			//println "classpathentry:$projectName"
			srcCP.plus{
				classpathentry(kind: 'src', path: "$projectName-java")
				classpathentry(kind: 'src', path: "$projectName-resource")
			}
		}
	}
	//写入.classpath文件
	file(".classpath").withWriter{ writer->
		groovy.xml.XmlUtil.serialize(classpathList, writer)
	}
}

//运行copyDependenciesJarToWebApp命令时必须打成jar包保留在WEB-INF/lib下面
ext.mustPackageJarName = ['comtop-cap-bm-base.jar']

ext.notRuntimeJars = ['poi-ooxml-3.12.jar','poi-ooxml-schemas-3.12.jar','poi-scratchpad-3.12.jar','ooxml-schemas-1.1.jar',
                      'jsoup-1.8.3.jar','freemarker-2.3.20.jar','commons-compress-1.9.jar',
                      'comtop-cip-dbpool-1.0.jar','ojdbc-6.jar','jnotify-0.94.jar'
                      ]

//删除lib里面下的cap相关包
task deleteLibCapJar << {
	getAllDependProjectJarNames().each {
		println "delete file：$webAppDir/WEB-INF/lib/$it"
		delete("$webAppDir/WEB-INF/lib/$it")
	}
}

 //删除webApp/WEB-INF/lib目录
 task cleanLibDir(type: Delete){
	 def libDir = new File("$webAppDir/WEB-INF/lib");
	 delete libDir
 }
 
 //删除webApp/WEB-INF/lib目录
 task cleanClassesDir(type: Delete){
	 def classesDir = new File("$webAppDir/WEB-INF/classes");
	 delete classesDir
 }

 
 task executCopy(dependsOn: jar) << {
	//先删除lib目录，再把依赖的jar包拷贝到lib目录下（会自动创建lib目录）
	 copy {
		 from configurations.runtime.minus(configurations.providedRuntime)
		 into 'src/main/webapp/WEB-INF/lib'
		 include '**/*.jar'
		 //去掉top增量版本号改成5.0
		 rename (/comtop-top-(?!corm)([\w-]+)(?:-\S+)*\.jar/, 'comtop-top-$1-5\\.0\\.jar')
		 rename (/comtop-top-dwr-([\d.])*\.jar/, 'comtop-top-dwr-3.jar')
		 //rename 'comtop-top-corm-3.1.2.jar', 'comtop-top-corm-3.1.2.jar'
		 rename 'comtop-top-login-tass-5.0.jar', 'comtop-top-login-tass-1.0.0.jar'
		 //去掉soa增量版本号
		 rename 'comtop-soa-core-.+\\.jar', 'comtop-soa-core\\.jar'
		 //去掉eic增量版本号
		 rename 'eic-core-.+\\.jar', 'eic-core-1\\.0\\.6\\.jar'
		 rename 'eic-view-.+\\.jar', 'eic-view-1\\.0\\.6\\.jar'
		 //去掉bpms增量版本号
		 rename 'comtop-bpms-(.+)-.+\\.jar', 'comtop-bpms-$1\\.jar'
		 //其他依赖jar处理
		 rename 'flex-rds-server-20150427.jar', 'flex-rds-server.jar'
		 rename 'flex-messaging-(.+)-.+\\.jar', 'flex-messaging-$1\\.jar'
		 //comtop-util-eim-send-msg-1.4.109.jar -> comtop-util-eim-send-msg.jar
		 rename 'comtop-util-eim-send-msg-.+\\.jar', 'comtop-util-eim-send-msg.jar'
		 //rename 'comtop-intergrationfassets-util-.+\\.jar', 'comtop-intergrationfassets-util.jar'
		 //comtop-core-mc-1.0.2-20150906.jar -> comtop-core-mc-1.0.2.jar
		 rename 'comtop-core-mc-1.0.2-.+\\.jar', 'comtop-core-mc-1.0.2.jar'
		// rename (/comtop-dart-framework-[\d].+[.]jar/, 'comtop-dart-framework-1.0.0.jar')
		 //rename 'comtop-dart-framework-compensabletx-.+\\.jar', 'comtop-dart-framework-compensabletx-1.0.0.jar'
	 }
 }
 
/**
 *copy各个java工程编译后的文件到webApp工程的WEB-INF/classes下面
 */
task copyDependenciesJarToWebApp(){
     group "copy jar"
     description "拷贝所有可用jar(去除cap建模和运行时jar)到WEB-INF/lib下面"
     doLast{
	     if(!isPack) {
			//删除CAP自身的工程jar包,因为classes下面已经有了
			def allProjectJarNames = getAllDependProjectJarNames()
			allProjectJarNames.removeAll(mustPackageJarName)
			allProjectJarNames.each {
					println "delete file：$webAppDir/WEB-INF/lib/$it"
					delete("$webAppDir/WEB-INF/lib/$it")
			}
		 }
     }
}

//设置依赖任务
copyDependenciesJarToWebApp.dependsOn 'cleanClassesDir','cleanLibDir','executCopy'

copyDependenciesJarToWebApp {
	ext.isPack = false
}

/**
 * 拷贝所有可用jar(包括cap建模和运行时jar)到WEB-INF/lib下面
 *
 * 可用于发布CAP建模环境给用户使用
 */
task copyAllJarToWebApp(){
   group "copy jar"
   description "拷贝所有可用jar(包括cap建模和运行时jar)到WEB-INF/lib下面-可用于发布CAP建模环境给用户使用"
   doLast{
      println '拷贝所有依赖jar到WEB-INF/lib中成功...'
   }
}
copyAllJarToWebApp.dependsOn 'cleanClassesDir','cleanLibDir','executCopy'

/**
 * 动态获取所有依赖的工程名称
 *
 * added by chang.xu
 */
List getAllDependProjectJarNames(){
     def jarNames = []
     def projects = project.getConfigurations().getByName('compile').getAllDependencies().withType(org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency.class)
     for(org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency projectDepend : projects){
       jarNames.add("comtop-"+projectDepend.name +".jar")
     }
     return jarNames
}

//所有需要加密的jar名称
ext.encryptJarNames = ''
//其他需要加密的jar名称
ext.otherEncryptJarName = rootProject.rootDir.absolutePath + '\\encrypt\\tool\\comtop-cap-license-1.2.jar'

/**
 * 动态获取所有需要加密依赖的jar名称
 */
task getAllEncryptJarName(dependsOn : jar){
  group "encrypt"
  description "动态获取所有需要加密依赖的jar名称"
  doLast{
     def jarNames = ''
	 def projects = project.getConfigurations().getByName('compile').getAllDependencies().withType(org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency.class)
	 def count = 0
	 for(org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency projectDepend : projects){
	    if(!projectDepend.dependencyProject.jarEncrypt){
	       continue
	    }
	    // println jarNames
	    if(count>0){
	       jarNames = jarNames + (";" + projectDepend.dependencyProject.buildDir.path + '\\libs' + "\\comtop-"+projectDepend.name +".jar")
	    }else{
	      // println jarNames
	       jarNames = jarNames + (projectDepend.dependencyProject.buildDir.path + '\\libs' + "\\comtop-"+projectDepend.name +".jar")
	    }
	    count++
	 }
	 jarNames += ';' + otherEncryptJarName
	 encryptJarNames = jarNames
  }
}

/**
 * 动态获取所有需要加密依赖的jar名称
 */
List getAllProguardJars(){
    def jarNames = []
	def projects = project.getConfigurations().getByName('compile').getAllDependencies().withType(org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency.class)
	for(org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency projectDepend : projects){
	    if(!projectDepend.dependencyProject.jarEncrypt){
	       jarNames.add(projectDepend.dependencyProject.buildDir.path + '\\libs' + "\\comtop-"+projectDepend.name +".jar")
	    }
	}
    return jarNames;
}


List getAllBmDependProjectJarNames(){
     def jarNames = []
     def projects = project.getConfigurations().getByName('compile').getAllDependencies().withType(org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency.class)
     for(org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency projectDepend : projects){
       if(projectDepend.name.indexOf('runtime')==-1){
          jarNames.add("comtop-"+projectDepend.name +".jar")
       }
     }
     return jarNames
}

/**
 * 构建运行时的环境（把建模的jar以及建模依赖的去掉）
 */
task copyRuntimeJarsToWebApp() << {
	//exclude notRuntimeJars;
	notRuntimeJars.addAll(getAllBmDependProjectJarNames())
	notRuntimeJars.each {
		println "delete file：$webAppDir/WEB-INF/lib/$it"
		delete("$webAppDir/WEB-INF/lib/$it")
	}
}
copyRuntimeJarsToWebApp.dependsOn 'cleanClassesDir','cleanLibDir','executCopy'

/**
 * 构建cap发布包
 */
task buildCapRelease(type:Zip) {
	dependsOn 'copyDependenciesJarToWebApp'
	dependsOn 'clearDistZip'
	archiveName="CAP_V${currentVersion}_" + new Date().format('yyyyMMdd_HHmm') + '.zip'
	def targetProjectName = 'CAP'
	//java目录
	into("$targetProjectName/src/main/java"){
		from 'src/main/java'
	}
	//resources目录
	into("$targetProjectName/src/main/resources"){
		from 'src/main/resources'
	}
	
	//webapp目录
	into("$targetProjectName/src/main/webapp"){
		from 'src/main/webapp'
		exclude '**/classes'
	}
	
	//gradle 配置
	into("$targetProjectName"){
		from "${rootProject.projectDir}/targetProject/gradeConfig"
	}
	
	//eclipse 配置
	into("$targetProjectName"){
		from "${rootProject.projectDir}/targetProject/eclipseConfig"
	}
	
	//cui wab app
	into("cui-webapp"){
		from "${rootProject.projectDir}/cui-webapp"
	}
}

//清除distributions目录下的zip包
task clearDistZip() << {
	delete("$buildDir/$distsDirName")
}
clearDistZip.mustRunAfter copyDependenciesJarToWebApp

//构建ear包
task distEarZip(type:Zip){
	dependsOn 'copyDependenciesJarToWebApp'
    baseName='CAP_MODEL_Build'+deployPackageTime+'_V'
    from 'src/main/application'
    into('web'){
        from 'src/main/webapp'
    }

    into('APP-INF/lib'){
       from 'src/main/webapp/WEB-INF/lib'
    }
    
    into('APP-INF/classes'){
       from 'build/resources/main/'
       exclude 'com/','META-INF/'
    }
}

//执行完distEarZip需要去掉lib里cap相关jar包保证开发环境正常使用
distEarZip.doLast {
	tasks.deleteLibCapJar.execute()
}

//运行gradle任务之前得到所有任务执行视图
gradle.taskGraph.whenReady {taskGraph ->
	if (taskGraph.hasTask(distEarZip) || taskGraph.hasTask(buildCapRelease)) {
		copyDependenciesJarToWebApp.isPack = true
	}
}

//不需要加密的文件
ext.encryptFilterFilePath = rootProject.rootDir.absolutePath + '\\encrypt\\tool\\ignoreEncrypt.txt'

//加密的jar输出路径
ext.encryptOutPutPath = rootProject.rootDir.absolutePath + '\\encrypt\\jars'

/**
 * 工程jar包加密
 */
task encrypt(dependsOn:getAllEncryptJarName){
	group "encrypt"
	description "将需要加密的工程加密输出到encrypt/outputPath下"
	//加密工具jar名称
	def toolsJar = rootProject.rootDir.getAbsolutePath()+'/encrypt/tool/comtop-encrypt-tools.jar'
	doLast {
      javaexec {
        classpath sourceSets.main.runtimeClasspath
        classpath(toolsJar)
        main = 'com.comtop.encrypt.JarFileEncryptMain'
        args =[encryptJarNames,encryptOutPutPath,encryptFilterFilePath]
      }
      println '成功加密输出路径:' + encryptOutPutPath
    }
}

//加密的jar输出路径
ext.proguardTempPath = rootProject.rootDir.absolutePath + '\\encrypt\\temp'

/**
 * 删除临时目录
 */
task cleanProguardTemp(type: Delete){
	 def libDir = new File(proguardTempPath);
	 delete libDir
}

/**
 * 删除混淆目录
 */
task cleanProguard(type: Delete){
	 delete '../encrypt/proguard'
	 delete '../encrypt/proguard.map'
}

/**
 * 拷贝需要混淆的jar
 */ 
task copyProguardJarsToTemp(dependsOn:[cleanProguardTemp,jar]) {
	group "encrypt"
	description "将需要混淆的工程输出到encrypt/temp下"
	
	doLast{
		def libDir = new File(proguardTempPath);
		libDir.mkdirs();
		def jars = getAllProguardJars();
		jars.each { jarFile ->
			copy {
		        from jarFile
		        into proguardTempPath
		    }
		}
	}
}

/**
 * 代码混淆
 */
task proguard(type: proguard.gradle.ProGuardTask,dependsOn:[cleanProguard,copyProguardJarsToTemp]) {
	group "encrypt"
	description "将需要混淆的工程混淆输出到encrypt/proguard下"
	
	injars '../encrypt/temp'
	
	outjars '../encrypt/proguard'
	
	//指定要处理的应用程序jar,war,ear和目录所需要的程序库文件
	libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
	libraryjars "../encrypt/tool/jsp-api.jar"
	libraryjars "../encrypt/tool/servlet-api.jar"
	libraryjars  "$webAppDir/WEB-INF/lib/"  
	
	printmapping '../encrypt/proguard.map' //打印旧名称到重命名的类、类成员的新名称的映射关系，可输出到指定文件。仅实用于混淆处理
	
	dontwarn   //不对指定的类、包中的不完整的引用发出警告
	keepparameternames //指定保留参数名称和保留的方法类型。 此选项实际上保留调试属性LocalVariableTable和LocalVariableTypeTable的修剪版本。 它在处理库时很有用。 一些IDE可以使用该信息来帮助使用库的开发人员，例如使用工具提示或自动完成。仅适用于混淆处理。
	renamesourcefileattribute 'SourceFile'//指定要放在类文件的SourceFile属性（和SourceDir属性）中的常量字符串。 请注意，该属性必须以开头存在，因此也必须使用-keepattributes指令明确保留。 例如，您可能希望使已处理的库和应用程序生成有用的混淆堆栈跟踪。仅适用于混淆处理。
	keepattributes 'Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,EnclosingMethod' //指定要保留的任何可选属性(注释...)。 可以使用一个或多个-keepattributes指令指定属性。 *attribute_filter*过滤器是以逗号分隔的属性名称列表。如果代码依赖于注释，则可能需要保留注释。 仅适用于混淆处理。
	
	keepdirectories //指定要保持的目录结构，默认情况下会删除所有目录以减小jar的大小。防止mybaties、spring无法扫描jar里的类和配置文件。
	optimizations '!code/allocation/variable' //指定更精细级别的优化，仅用于优化阶段.解决问题：java.lang.ClassFormatError: LVTT entry for 'a' in class file ×× does not match any LVT entry
	
	keepattributes '*Annotation*' //指定要保留的任何可选属性(注释...)。
	
	//保护指定的类文件和类的成员
	keep 'public class * { \
	    public protected *; \
	}'
	
	//被@PetiteInject注解修饰的成员变量不混淆，防止jodd的bean注入失败  
	keep '@com.comtop.cip.jodd.petite.meta.PetiteInject class * {*;}'
	keep 'class * { \
		@com.comtop.cip.jodd.petite.meta.PetiteInject <fields>; \
	}'
	keepclassmembers 'class * { \
	    @com.comtop.cip.jodd.petite.meta.PetiteInject <methods>; \
	}'
	
	// 被@In注解修饰的成员变量不混淆，防止jodd的mvc框架失效  
	keep '@com.comtop.cip.jodd.madvoc.meta.In class * {*;}'
	keep 'class * { \
		@com.comtop.cip.jodd.madvoc.meta.In <fields>; \
	}'
	keepclassmembers 'class * { \
	    @com.comtop.cip.jodd.madvoc.meta.In <methods>; \
	}'
	
	//被@Out注解修饰的成员变量不混淆，防止jodd的mvc框架失效  
	keep '@com.comtop.cip.jodd.madvoc.meta.Out class * {*;}'
	keep 'class * { \
		@com.comtop.cip.jodd.madvoc.meta.Out <fields>; \
	}'
	keepclassmembers 'class * { \
	    @com.comtop.cip.jodd.madvoc.meta.Out <methods>; \
	}'
	
	//被@InOut注解修饰的成员变量不混淆，防止jodd的mvc框架失效  
	keep '@com.comtop.cip.jodd.madvoc.meta.InOut class * {*;}'
	keep 'class * { \
		@com.comtop.cip.jodd.madvoc.meta.InOut <fields>; \
	}'
	keepclassmembers 'class * { \
	    @com.comtop.cip.jodd.madvoc.meta.InOut <methods>; \
	}'
	
	//保持标签变量名、方法名不被混淆。
	keep 'public class * implements **.BaseTag { \
	    public protected private *; \
	}'
	
	//被@Resource注解修饰的成员变量不混淆，防止spring注入失败  
	keep '@javax.annotation.Resource class * {*;}'
	keep 'class * { \
		@javax.annotation.Resource <fields>; \
	}'
	keepclassmembers 'class * { \
	    @javax.annotation.Resource <methods>; \
	}'
	
	//保持VO变量名、方法名不被混淆。
	keep 'public class **.*VO { \
	    public protected private *; \
	}'
	
	//保持DTO变量名、方法名不被混淆。
	keep 'public class **.*DTO { \
	    public protected private *; \
	}'
	
	//保护指定的类的成员的名称（如果他们不会压缩步骤中删除）
	keepclassmembernames 'class * { \
	    java.lang.Class class$(java.lang.String); \
	    java.lang.Class class$(java.lang.String, boolean); \
	}'
	
	//保护指定的类和类的成员的名称，如果所有指定的类成员出席（在压缩步骤之后）
	keepclasseswithmembernames includedescriptorclasses:true, 'class * { \
	    native <methods>; \
	}'
	
	//指定需要保留的类成员:变量或者方法
	keepclassmembers allowshrinking:true, 'enum * { \
	    public static **[] values(); \
	    public static ** valueOf(java.lang.String); \
	}'
	
	keepclassmembers 'class * implements java.io.Serializable { \
	    static final long serialVersionUID; \
	    static final java.io.ObjectStreamField[] serialPersistentFields; \
	    private void writeObject(java.io.ObjectOutputStream); \
	    private void readObject(java.io.ObjectInputStream); \
	    java.lang.Object writeReplace(); \
	    java.lang.Object readResolve(); \
	}'
}

proguard.doLast {
	delete "../encrypt/temp"
	delete "../encrypt/proguard/temp"
}


javadoc{

}